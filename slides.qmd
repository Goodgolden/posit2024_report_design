---
title: "Report Design in R: Small Tweaks that Make a Big Difference"
format:
  rfortherestofus-slides-revealjs:
    menu: false
    progress: false
    slide-number: true
    show-slide-number: print
    incremental: true
    # center: true
    auto-animate: true
    transition: fade
    code-overflow: wrap
    spotlight:
      presentingCursor: default
      size: 100
      toggleSpotlightOnMouseDown: false
      spotlightOnKeyPressAndHold: 73
revealjs-plugins:
  - spotlight
execute: 
  message: false
  warning: false
  cache: false
  out-width: 100%
title-slide-attributes:
  data-background-image: assets/rru-hex-bg-gradient-dark.svg
  data-background-size: cover
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse)
library(scales)
library(patchwork)
```

# {background-image="assets/david-kid.jpg" .inverse}

::: {.notes}
- TODO: replace with photo just of me
- Talk about how it was making multiple reports
:::

# {background-image="assets/david-disheviled.jpg" .inverse}


::: {.notes}
- Add image of me as a kid before making reports
- Add image of looking disheviled after trying to do reports in Excel/Word
- Add image of me looking better after doing reports in R
:::

---

Some slide that shows transition of me moving to R

# {background-image="assets/road-split.jpg" .inverse}

---

## Make ugly reports {background-image="assets/road-split-left.jpg" .inverse}

---

::: {.center}
![](assets/quarto-default-pdf.png)
:::

---

## Work with a designer {background-image="assets/road-split-right.jpg" .inverse}

::: {.notes}
But the second option isn't reproducible
TODO: Maybe show OBTN here?
:::

---


## Make beautiful reports in R {background-image="assets/road-split-middle.jpg" .inverse}

::: {.notes}
TODO: Make this not centered vertically (use disable-layout)
TODO: talk about elements you combine to make good reports: data viz, tables, report design with typst
:::


. . .



# {background-image="assets/psc-sample-Hartford-first-two-pages.png" background-size="contain"}

# {background-image="assets/psc-sample-Hartford-second-two-pages.png" background-size="contain"}


# {background-image="assets/david-wedding.jpg" .inverse}

::: {.notes}
TODO: Add "results not guaranteed"
:::

# Does Design Matter? {.inverse}

::: {.notes}
- Talk about how some devs don't think it matters at all
- "I'm David and I think design matters because here's what you can do with it"
:::

## Aesthetic Usability Effect {.center .inverse}

::: {.notes}
Users see aesthetically pleasing designs as more intuitive
:::



## Good Design Builds Trust {.center .inverse}

::: {.notes}
Putting effort into your charts shows respect for your audience, **which means that they in turn are going to respect you and your findings**.
:::


## But I'm Not a Designer! {.inverse .center}

::: {.notes}
But design is a skill that can be taught and R users already have many of the skills needed to do good design
:::

# Good Design is Just a Few Small Tweaks {background-image="assets/tweaks2.jpg" .inverse .center}

---

1. Don't use defaults

1. Be Consistent

---

## What is a Report? {.inverse .center}

---


![](assets/hartford-housing.png)

---

### Create a Layout

![](assets/psc-report-layout.png)

---

### Use Brand Colors

![](assets/psc-report-color.png)
---

### Use Brand Fonts

![](assets/psc-report-font.png)
---

### Add Plots

![](assets/psc-report-plots.png)

---

![](assets/hartford-housing.png)

::: {.notes}
- Layout
- Colors
- Fonts
- Plots (also use colors and fonts)
:::

---

# Create a Layout {.inverse}

## {background-image="assets/who-runs-the-world.gif" .inverse}

## PDFs (sorry) {background-image="assets/who-runs-the-world.gif" .inverse .center}

## typst {.inverse .center}

```{r}
#| eval: false
quarto::quarto_render("report.qmd")

renderthis::to_png(
  from = "report.pdf",
  to = "assets/typst-report.png"
)
```

::: {.notes}
- Apply brand colors to template for sections

- Apply brand fonts to template
:::


---

# {background-image="assets/typst-report.png" background-size="contain"}

---

:::{.img-no-shadow}
![](assets/typst-workflow.png)
:::

## `report.qmd`

```{markdown}
#| echo: true
---
title: "Housing Data Profiles"

format: 
  typst:
    template-partials:
      - typst-show.typ
      - typst-template.typ

params:
  town: "Hartford"
---

# Test

Consequat occaecat mollit velit aliquip. Sunt Lorem cupidatat ad adipisicing do ...
```

## `typst-show.typ`

```{typst}
#| echo: true
#| eval: false
#show: psc-report.with(
$if(title)$
  title: "$title$",
$endif$
$if(subtitle)$
  subtitle: "$subtitle$",
$endif$
$if(params.town)$
  town: "$params.town$",
$endif$
)
```

## `typst-template.typ`

```{typst}
#| echo: true
#| eval: false
#let psc-report(
  title: "title",
  town : "town",
  body,
) = {

 set text()

 set page()

 body
}


```


---

:::: {.columns}

::: {.column width="50%"}
![](assets/typst-report.png)
:::

::: {.column width="50%"}
<br>
```{typst}
#| echo: true
#| eval: false
set text(
  font: "Open Sans",
  size: 11pt,
)
```
:::

::::



---

:::: {.columns}

::: {.column width="50%"}
![](assets/typst-report.png)
:::

::: {.column width="50%"}
<br>
```{typst}
#| echo: true
#| eval: false
set page(
  "us-letter",
  margin: (left: 1in, 
           right: 1in, 
           top: 0.7in, 
           bottom: 1in)
```
:::

::::

---

:::: {.columns}

::: {.column width="50%"}
![](assets/typst-report.png)
:::

::: {.column width="50%"}
<br>
```{typst}
#| echo: true
#| eval: false
background: 
  place(top, 
        rect(fill: rgb("15397F"), 
             width: 100%, 
             height: 0.5in))
```
:::

::::

---

:::: {.columns}

::: {.column width="50%"}
![](assets/typst-report.png)
:::

::: {.column width="50%"}
<br>
```{typst}
#| echo: true
#| eval: false
header: align(
  horizon,
  grid(
    columns: (80%, 20%),
    align(left, 
          text(size: 20pt, 
               fill: white, 
               weight: "bold", 
               title)),
    align(right, 
          text(size: 12pt, 
               fill: white, 
               weight: "bold", 
               town)),
  ),
)
```
:::

::::

---

:::: {.columns}

::: {.column width="50%"}
![](assets/typst-report.png)
:::

::: {.column width="50%"}
<br>
```{typst}
#| echo: true
#| eval: false
footer: align(
  grid(
    columns: (40%, 60%),
    align(horizon, 
          text(fill: rgb("15397F"), 
          size: 10pt, 
          counter(page).display("1"))),
    align(right, 
          image("psclogo.svg", 
          height: 300%)),
  )
```
:::

::::

# Plots {.inverse}




## Use Functions to Make Your Plots Consistent {.inverse .center}




# Comparison Plots {.inverse}


# {background-image="assets/psc-sample-Hartford-first-two-pages-comparison-plots.png" background-size="contain"}

# {background-image="assets/psc-sample-Hartford-second-two-pages-comparison-plots.png" background-size="contain"}

---

![](assets/comparison-plot-explanation.png)

. . .

![](assets/single-family-homes-plot.png)

. . .

![](assets/total-population-plot.png)


---


```{r}
single_family_homes <-
  read_rds("data/single_family_homes.rds")
```

```{r}
#| echo: true
#| eval: false
library(tidyverse)
library(scales)
```

. . .

```{r}
#| echo: true
#| eval: false
single_family_homes
```

```{r}
single_family_homes |>
  print(n = Inf)
```


---

```{r}
comparison_plot <- function(df, highlight_town) {
  df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    geom_hline(
      yintercept = 1,
      color = "gray90",
      linewidth = 0.25
    ) +
    geom_point(
      shape = 124,
      color = "gray80",
      size = 5
    ) +
    expand_limits(
      x = 0
    ) +
    theme_void() +
    theme(
      axis.text.x = element_text(
        size = 13,
        color = "gray40"
      ),
      legend.position = "none",
      plot.margin = margin(rep(20, 4))
    ) +
    geom_point(
      data = df |> filter(location == highlight_town),
      shape = 124,
      color = "gray30",
      size = 10
    )
}
```

```{r}
#| echo: true
#| eval: false
comparison_plot <- function(df, highlight_town) { }
```

---


```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2-8"
comparison_plot <- function(df, highlight_town) {
  df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    ...
}
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "9-13"
comparison_plot <- function(df, highlight_town) {
  df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    # Light gray lines for all towns
    geom_point(
      shape = 124,
      color = "gray80"
    ) +
    ...
}
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "14-19"
comparison_plot <- function(df, highlight_town) {
  df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    # Light gray lines for all towns
    geom_point(
      shape = 124,
      color = "gray80"
    ) +
    # Dark gray line for town to highlight
    geom_point(
      data = df |> filter(location == highlight_town),
      shape = 124,
      color = "gray30"
    ) +
    ...
}
```

---

```{r}
#| echo: true
#| eval: false
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford"
)
```

. . .

```{r}
#| fig-height: 1.5
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford"
)
```


---

```{r}
comparison_plot <- function(df, highlight_town) {
  df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    geom_hline(
      yintercept = 1,
      color = "gray90",
      linewidth = 0.25
    ) +
    geom_point(
      shape = 124,
      color = "gray80",
      size = 5
    ) +
    scale_x_continuous(
      labels = percent_format(accuracy = 1)
    ) +
    expand_limits(
      x = 0
    ) +
    theme_void() +
    theme(
      axis.text.x = element_text(
        size = 13,
        color = "gray40"
      ),
      legend.position = "none",
      plot.margin = margin(rep(20, 4))
    ) +
    geom_point(
      data = df |> filter(location == highlight_town),
      shape = 124,
      color = "gray30",
      size = 10
    )
}
```



```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "8-10"
comparison_plot <- function(df, highlight_town) {
  ggplot(
    aes(
      x = value,
      y = 1
    )
  ) +
    scale_x_continuous(
      labels = percent_format(accuracy = 1)
    ) +
    ...
}
```

. . .


```{r}
#| fig-height: 1.5
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford"
)
```



---

![](assets/total-population-plot.png)

---

```{r}
#| echo: true
#| eval: false
comparison_plot <- function(df, highlight_town, value_type) { }
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2-5"
comparison_plot <- function(df, highlight_town, value_type) {
  plot <-
    df |>
    ggplot() +
    ...
}
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "7-12"
comparison_plot <- function(df, highlight_town, value_type) {
  plot <-
    df |>
    ggplot() +
    ...

  if (value_type == "percent") {
    final_plot <- plot +
      scale_x_continuous(
        labels = percent_format(accuracy = 1)
      )
  }
}
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "14-19"
comparison_plot <- function(df, highlight_town, value_type) {
  plot <-
    df |>
    ggplot() +
    ...

  if (value_type == "percent") {
    final_plot <- plot +
      scale_x_continuous(
        labels = percent_format(accuracy = 1)
      )
  }

  if (value_type == "number") {
    final_plot <- plot +
      scale_x_continuous(
        labels = comma_format(accuracy = 1)
      )
  }
}
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "21"
comparison_plot <- function(df, highlight_town, value_type) {
  plot <-
    df |>
    ggplot() +
    ...

  if (value_type == "percent") {
    final_plot <- plot +
      scale_x_continuous(
        labels = percent_format(accuracy = 1)
      )
  }

  if (value_type == "number") {
    final_plot <- plot +
      scale_x_continuous(
        labels = comma_format(accuracy = 1)
      )
  }

  final_plot
}
```

---

```{r}
comparison_plot <- function(df, highlight_town, value_type) {
  plot <-
    df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    geom_hline(
      yintercept = 1,
      color = "gray90",
      linewidth = 0.25
    ) +
    geom_point(
      shape = 124,
      color = "gray80",
      size = 5
    ) +
    expand_limits(
      x = 0
    ) +
    theme_void() +
    theme(
      axis.text.x = element_text(
        size = 13,
        color = "gray40"
      ),
      legend.position = "none",
      plot.margin = margin(rep(20, 4))
    ) +
    geom_point(
      data = df |> filter(location == highlight_town),
      shape = 124,
      color = "gray30",
      size = 10
    )

  if (value_type == "percent") {
    final_plot <-
      plot +
      scale_x_continuous(
        labels = percent_format(accuracy = 1)
      )
  }

  if (value_type == "number") {
    final_plot <-
      plot +
      scale_x_continuous(
        labels = comma_format(accuracy = 1)
      )
  }

  final_plot
}
```

```{r}
#| echo: true
#| eval: false
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford",
  value_type = "percent"
)
```

. . .

```{r}
#| fig-height: 1.5
#| code-line-numbers: "4"
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford",
  value_type = "percent"
)
```

---

```{r}
total_population <-
  read_rds("data/total_population.rds")
```

```{r}
#| echo: true
#| eval: false
total_population
```

```{r}
total_population |>
  print(n = Inf)
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  value_type = "number"
)
```

. . .

```{r}
#| fig-height: 1.5
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  value_type = "number"
)
```


# Big Numbers {.inverse}

---

![](assets/single-family-homes-plot.png)

![](assets/total-population-plot.png)

---

```{r}
total_population <-
  read_rds("data/total_population.rds")
```

```{r}
#| echo: true
big_number_plot <- function(value, text) { }
```

---

```{r}
#| echo: true
#| code-line-numbers: "4-13"
big_number_plot <- function(value, text) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1,
        label = value
      ),
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +
    ...
}
```

---

```{r}
#| echo: true
#| code-line-numbers: "15-25"
big_number_plot <- function(value, text) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1,
        label = value
      ),
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +
    # Add text
    geom_text(
      aes(
        x = 1,
        y = 2,
        label = str_to_upper(text)
      ),
      color = "gray70",
      size = 7,
      hjust = 0
    ) +
    ...
}
```

---

```{r}
big_number_plot <- function(value, text) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1,
        label = value
      ),
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +
    # Add text
    geom_text(
      aes(
        x = 1,
        y = 2,
        label = str_to_upper(text)
      ),
      color = "gray70",
      size = 7,
      hjust = 0,
      lineheight = 1
    ) +
    scale_y_continuous(limits = c(0, 2.25)) +
    theme_void()
}
```

```{r}
#| echo: true
#| eval: false
big_number_plot(
  value = "19%",
  text = "Single-Family Homes as\nPercent of All Homes"
)
```

. . .

```{r}
#| fig-height: 2
big_number_plot(
  value = "19%",
  text = "Single-Family Homes as\nPercent of All Homes"
)
```

## Use Brand Colors {.inverse .center}

---

### Define Colors as Variables

```{r}
#| echo: true
psc_blue <- "#15397F"
psc_red <- "#9F3515"
psc_lightblue <- "#8DA4AE"
```

```{r}
show_col(
  c(
    psc_blue,
    psc_red,
    psc_lightblue
  ),
  borders = NA
)
```

---

### Use colors in plots

![](assets/single-family-homes-plot.png)

![](assets/total-population-plot.png)

```{r}
comparison_plot <- function(df, highlight_town, highlight_color, value_type) {
  plot <-
    df |>
    ggplot(
      aes(
        x = value,
        y = 1
      )
    ) +
    geom_hline(
      yintercept = 1,
      color = "gray90",
      linewidth = 0.25
    ) +
    geom_point(
      shape = 124,
      color = "gray80",
      size = 5
    ) +
    expand_limits(
      x = 0
    ) +
    theme_void() +
    theme(
      axis.text.x = element_text(
        size = 13,
        color = "gray40"
      ),
      legend.position = "none",
      plot.margin = margin(rep(20, 4))
    ) +
    geom_point(
      data = df |> filter(location == highlight_town),
      shape = 124,
      color = highlight_color,
      size = 10
    )

  if (value_type == "percent") {
    final_plot <-
      plot +
      scale_x_continuous(
        labels = percent_format(accuracy = 1)
      )
  }

  if (value_type == "number") {
    final_plot <-
      plot +
      scale_x_continuous(
        labels = comma_format(accuracy = 1)
      )
  }

  final_plot
}
```

---

```{r}
#| echo: true
#| eval: false
comparison_plot <- function(df, highlight_town, highlight_color, value_type) { }
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "5"
comparison_plot <- function(df, highlight_town, highlight_color, value_type) {
  geom_point(
    data = df |> filter(location == highlight_town),
    shape = 124,
    color = highlight_color,
    size = 10
  )
}
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford",
  highlight_color = psc_blue,
  value_type = "percent"
)
```

. . .

```{r}
#| fig-height: 1.5
comparison_plot(
  df = single_family_homes,
  highlight_town = "Hartford",
  highlight_color = psc_blue,
  value_type = "percent"
)
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  highlight_color = psc_red,
  value_type = "number"
)
```

. . .

```{r}
#| fig-height: 1.5
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  highlight_color = psc_red,
  value_type = "number"
)
```

---

### Big Numbers

![](assets/single-family-homes-plot.png)

![](assets/total-population-plot.png)

---

```{r}
#| echo: true
big_number_plot <- function(value, text, value_color) { }
```

---

```{r}
#| echo: true
#| code-line-numbers: "1,10"
big_number_plot <- function(value, text, value_color) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1,
        label = value
      ),
      color = value_color,
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +
    # Add text
    geom_text(
      aes(
        x = 1,
        y = 2,
        label = str_to_upper(text)
      ),
      size = 7,
      hjust = 0
    ) +
    ...
}
```

---

```{r}
big_number_plot <- function(value, text, value_color) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1,
        label = value
      ),
      color = value_color,
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +
    # Add text
    geom_text(
      aes(
        x = 1,
        y = 2,
        label = str_to_upper(text)
      ),
      color = "gray70",
      size = 7,
      hjust = 0,
      lineheight = 1
    ) +
    scale_y_continuous(limits = c(0, 2.5)) +
    theme_void()
}
```

```{r}
#| echo: true
#| eval: false
big_number_plot(
  value = "19%",
  text = "Single-Family Homes as\nPercent of All Homes",
  value_color = psc_blue
)
```

. . .

```{r}
#| fig-height: 1.75
big_number_plot(
  value = "19%",
  text = "Single-Family Homes as\nPercent of All Homes",
  value_color = psc_blue
)
```

. . .

```{r}
#| echo: true
#| eval: false
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
)
```

. . .

```{r}
#| fig-height: 1.75
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
)
```

# Text

## Make a ggplot theme {.inverse .center}

---

```{r}
#| echo: true
#| eval: false
theme_psc <- function() {
  theme_void(base_family = "Open Sans") +
    theme(
      ...
    )
}
```

```{r}
theme_psc <- function() {
  theme_void(base_family = "Open Sans") +
    theme(
      axis.text.x = element_text(
        size = 13,
        color = "gray40"
      ),
      legend.position = "none",
      plot.margin = margin(rep(20, 4))
    )
}
```


---

```{r}
#| echo: true
#| eval: false
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  highlight_color = psc_red,
  value_type = "number"
)
```

. . .

```{r}
#| fig-height: 1.5
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  highlight_color = psc_red,
  value_type = "number"
)
```

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "7"
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  highlight_color = psc_red,
  value_type = "number"
) +
  theme_psc()
```

. . .

```{r}
#| fig-height: 1.5
comparison_plot(
  df = total_population,
  highlight_town = "Hartford",
  highlight_color = psc_red,
  value_type = "number"
) +
  theme_psc()
```

---

```{r}
theme_psc <- function() {
  theme_void(base_family = "Open Sans")
}
```

```{r}
#| echo: true
#| eval: false
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
) +
  theme_psc()
```

```{r}
#| fig-height: 1.75
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
) +
  theme_psc()
```

---

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4,15"
big_number_plot <- function(value, text) {
  ggplot() +
    # Add value
    geom_text(
      aes(
        x = 1,
        y = 1,
        label = value
      ),
      fontface = "bold",
      size = 20,
      hjust = 0
    ) +
    # Add text
    geom_text(
      aes(
        x = 1,
        y = 2,
        label = str_to_upper(text)
      ),
      color = "gray70",
      size = 7,
      hjust = 0
    ) +
    ...
}
```

---

```{r}
#| echo: true
#| eval: false
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
)
```

. . .

```{r}
#| fig-height: 1.75
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
)
```

. . .

```{r}
#| echo: true
update_geom_defaults(
  "text",
  list(
    family = "Open Sans"
  )
)
```

. . .

```{r}
#| fig-height: 1.75
big_number_plot(
  value = "122,549",
  text = "Total Population",
  value_color = psc_red
)
```


::: {.notes}
TODO: Tell people to do the same with a table template
:::


# Combine Plots

---

```{r}
#| echo: true
single_family_homes_big_number_plot <-
  big_number_plot(
    value = "19%",
    text = "Single-Family\nHomes",
    value_color = psc_blue
  )
```

. . .

```{r}
#| echo: true
single_family_homes_comparison_plot <-
  comparison_plot(
    df = single_family_homes,
    highlight_town = "Hartford",
    value_type = "percent",
    highlight_color = psc_blue
  ) +
  theme_psc()
```

---

```{r}
#| echo: true
#| eval: false
library(patchwork)

single_family_homes_big_number_plot + single_family_homes_comparison_plot
```

. . .

```{r}
#| fig-height: 2.5
single_family_homes_big_number_plot + single_family_homes_comparison_plot
```



# Conclusion
